require("toriui.uielement3d")

---@alias ClanJoinMode
---| 0 CLAN_JOINMODE_INVITEONLY
---| 1 CLAN_JOINMODE_FREEFORALL
CLAN_JOINMODE_INVITEONLY = 0
CLAN_JOINMODE_FREEFORALL = 1

---@alias ClanActivityStatus
---| 0 CLAN_ACTIVITY_DEAD
---| 1 CLAN_ACTIVITY_ALIVE
---| 2 CLAN_ACTIVITY_ACTIVE
CLAN_ACTIVITY_DEAD = 0
CLAN_ACTIVITY_ALIVE = 1
CLAN_ACTIVITY_ACTIVE = 2

---@class Clan
---@field id integer Public clan id in the clans system
---@field name string Clan name
---@field tag string Clan tag
---@field is_official boolean
---@field rank integer
---@field level integer
---@field xp integer
---@field members_total integer
---@field join_mode ClanJoinMode
---@field top_achievement integer Clan's selected achievement id
---@field is_active ClanActivityStatus
---@field members string[] List of all clan members' names
---@field leaders string[] List of all clan leaders' names
---@field memberscustom string Custom display name for clan members
---@field leaderscustom string Custom display name for clan leaders
---@field colorNegative boolean Internal flag to tell if we should use dark font color for clan ui
---@field bgColor Color Custom clan background color
---@field xpBarBgColor Color Custom clan xp bar background color, autogenerated from `bgColor`
---@field xpBarColor Color Custom clan xp bar color, autogenerated from `bgColor`
---@field xpBarAccentTopColor Color Custom clan xp bar accent top color, autogenerated from `bgColor`
---@field xpBarAccentBotColor Color Custom clan xp bar accent bottom color, autogenerated from `bgColor`

---@class ClanLevel
---@field id integer
---@field min_xp integer Clan xp requirement for the level
---@field max_members integer Maximum number of clan members allowed at this level
---@field official_only boolean Whether reaching this level requires the clan to be official

---@class ClanAchievement
---@field id integer
---@field name string Achievement name
---@field description string Achievement description text

if (Clans == nil) then
	---**Toribash clans manager class**
	---
	---**Version 5.60 updates**
	---* Updated internals to match new language design
	---* Added documentation with EmmyLua annotations
	---* Partial UI updates to match 5.60 design
	---@class Clans
	---@field Data Clan[] Cached information about all Toribash clans with at least 1 member
	---@field Levels ClanLevel[] Cached information about clan levels
	---@field Achievements ClanAchievement[] Cached information about clan achivemenets
	---@field SearchFilters ClanListFilters Last clan search filters data
	Clans = {
		Data = {},
		Levels = {},
		Achievements = {},
		UpdateTime = -100,
		DefaultLogo = "../textures/clans/default.tga",
		ver = 5.60
	}
	Clans.__index = Clans
end

---Queues clans data for download \
---*This function has spam protection and will return early on frequent calls or if there's already at least one clan datafile in the queue*
---@return boolean
function Clans.Download()
	local clock = os.clock_real()

	if (clock - Clans.UpdateTime < 10) then
		return false
	end
	for _, v in pairs(get_downloads()) do
		if (v:find("clans/clan%w+%.txt$")) then
			return false
		end
	end

	Clans.UpdateTime = clock
	download_clan()

	return true
end

---Populates clan data and caches it in Clans object
---@param override ?boolean Whether to reset existing clan data cache
---@return integer|nil #Number of clans in the cache
function Clans:getClanData(override)
	if (override) then
		Clans.Data = {}
	end
	local numClans = table.size(Clans.Data)
	if (numClans > 0) then
		return numClans
	end

	local data_types = {
		{ "id", numeric = true },
		{ "name" },
		{ "tag" },
		{ "is_official", boolean = true },
		{ "rank", numeric = true },
		{ "level", numeric = true },
		{ "xp", numeric = true },
		{ "members_total", numeric = true },
		{ "join_mode", numeric = true },
		{ "top_achievement", numeric = true },
		{ "is_active", numeric = true },
		{ "members" },
		{ "leaders" },
		{ "bgColor" },
		{ "leaderscustom" },
		{ "memberscustom" }
	}
	local file = Files.Open("../data/clans.txt")
	if (not file.data) then
		return nil
	end

	local fileData = file:readAll()
	file:close()

	for _, ln in pairs(fileData) do
		if string.match(ln, "^CLAN") then
			pcall(function()
				local _, segments = ln:gsub("\t", "")
				local data_stream = { ln:match(("([^\t]*)\t"):rep(segments)) }

				local clanInfo = {}
				for i, v in pairs(data_types) do
					clanInfo[v[1]] = data_stream[i + 1]
					if (v.numeric) then
						clanInfo[v[1]] = tonumber(clanInfo[v[1]])
					end
					if (v.boolean) then
						clanInfo[v[1]] = clanInfo[v[1]] == "1"
					end
				end

				local membersList = clanInfo.members
				local leadersList = clanInfo.leaders
				clanInfo.members, clanInfo.leaders = {}, {}
				---@diagnostic disable-next-line: param-type-mismatch
				for player in string.gmatch(membersList or "", "%S+") do
					table.insert(clanInfo.members, player)
				end
				---@diagnostic disable-next-line: param-type-mismatch
				for player in string.gmatch(leadersList or "", "%S+") do
					---Insert leaders both to leaders list AND members list
					table.insert(clanInfo.members, player)
					table.insert(clanInfo.leaders, player)
				end
				---@diagnostic disable-next-line: param-type-mismatch
				if (string.len(clanInfo.bgColor) > 0) then
					---@diagnostic disable-next-line: param-type-mismatch
					clanInfo.bgColor = get_color_from_hex(clanInfo.bgColor)
					clanInfo.xpBarBgColor = table.clone(clanInfo.bgColor)
					clanInfo.xpBarColor = table.clone(clanInfo.bgColor)
					clanInfo.xpBarAccentTopColor = table.clone(clanInfo.bgColor)
					clanInfo.xpBarAccentBotColor = table.clone(clanInfo.bgColor)

					for i = 1, 3 do
						clanInfo.xpBarBgColor[i] = clanInfo.xpBarBgColor[i] + 0.05
						clanInfo.xpBarColor[i] = clanInfo.xpBarColor[i] - 0.1
						clanInfo.xpBarAccentTopColor[i] = clanInfo.xpBarAccentTopColor[i] + 0.1
						clanInfo.xpBarAccentBotColor[i] = clanInfo.xpBarAccentBotColor[i] - 0.2
					end
					if (get_color_contrast_ratio(clanInfo.bgColor) > 0.66) then
						clanInfo.colorNegative = true
					end
				else
					clanInfo.bgColor = nil
				end

				Clans.Data[clanInfo.id] = clanInfo
				numClans = numClans + 1
			end)
		end
	end
	return numClans
end

---Populates clan levels data and caches it in Clans object
---@param override ?boolean Whether to reset existing clan levels data cache
---@return integer|nil #Number of clan levels in the cache
function Clans:getLevelData(override)
	if (override) then
		Clans.Levels = {}
	end
	local numLevels = #Clans.Levels
	if (numLevels > 0) then
		return numLevels
	end

	local data_types = {
		{ "id", numeric = true },
		{ "min_xp", numeric = true },
		{ "max_members", numeric = true },
		{ "official_only", boolean = true }
	}

	local file = Files.Open("../data/clanlevels.txt")
	if (not file.data) then
		return nil
	end

	local fileData = file:readAll()
	file:close()

	for _, ln in pairs(fileData) do
		if string.match(ln, "^LEVEL") then
			local _, segments = ln:gsub("\t", "")
			local data_stream = { ln:match(("([^\t]*)\t"):rep(segments)) }

			local levelInfo = {}
			for i,v in pairs(data_types) do
				levelInfo[v[1]] = data_stream[i + 1]
				if (v.numeric) then
					levelInfo[v[1]] = tonumber(levelInfo[v[1]])
				end
				if (v.boolean) then
					levelInfo[v[1]] = levelInfo[v[1]] == "1"
				end
			end

			Clans.Levels[levelInfo.id] = levelInfo
			numLevels = numLevels + 1
		end
	end
	return numLevels
end

---Populates clan achievements data and caches it in Clans object
---@param override ?boolean Whether to reset existing clan achievements data cache
---@return integer|nil #Number of clan achievements in the cache
function Clans:getAchievementData(override)
	if (override) then
		Clans.Achievements = {}
	end
	local numAchievements = #Clans.Achievements
	if (numAchievements > 0) then
		return numAchievements
	end

	local data_types = {
		{ "id", numeric = true },
		{ "name" },
		{ "description" }
	}
	local file = Files.Open("../data/clanachievements.txt")
	if (not file.data) then
		return nil
	end
	local fileData = file:readAll()
	file:close()

	for _, ln in pairs(fileData) do
		if string.match(ln, "^ACHIEVEMENT") then
			local segments = 4
			local data_stream = { ln:match(("([^\t]*)\t"):rep(segments)) }

			local achievementInfo = {}
			for i,v in pairs(data_types) do
				achievementInfo[v[1]] = data_stream[i + 1]
				if (v.numeric) then
					achievementInfo[v[1]] = tonumber(achievementInfo[v[1]])
				end
				if (v.boolean) then
					achievementInfo[v[1]] = achievementInfo[v[1]] == "1"
				end
			end

			Clans.Achievements[achievementInfo.id] = achievementInfo
			numAchievements = numAchievements + 1
		end
	end
	return numAchievements
end

---Exits clans menu and returns to last displayed main menu screen
function Clans.Quit()
	TB_MENU_CLANS_OPENCLANID = 0
	TBMenu:clearNavSection()
	TBMenu:showNavigationBar()
	TBMenu:openMenu(TB_LAST_MENU_SCREEN_OPEN)
end

---Returns navigation buttons data for Clans menu
---@return MenuNavButton[]
function Clans:getNavigationButtons()
	return {
		{
			text = TB_MENU_LOCALIZED.NAVBUTTONBACK,
			action = function()
				TB_LAST_MENU_SCREEN_OPEN = 9
				TB_MENU_SPECIAL_SCREEN_ISOPEN = 0
				TBMenu:clearNavSection()
				TBMenu:showNavigationBar()
				TBMenu:showClans()
			end
		}
	}
end

---Checks if clan with the specified id is a legacy beginner clan
---@param clanid integer
---@return boolean
function Clans:isBeginnerClan(clanid)
	if (clanid == 2193 or clanid == 2194) then
		return true
	end
	return false
end

---Displays Clans main screen or opens a clan page by clan's tag if it's specified
---@param viewElement UIElement
---@param clantag ?string
function Clans:showMain(viewElement, clantag)
	if (not Clans:getLevelData() or not Clans:getAchievementData() or not Clans:getClanData()) then
		Clans.Download()
		local loader = viewElement:addChild({
			shift = { 5, 0 },
			bgColor = TB_MENU_DEFAULT_BG_COLOR
		})
		TBMenu:addBottomBloodSmudge(loader)
		loader:addCustomDisplay(false, function()
				if (table.empty(Clans.Achievements) or table.empty(Clans.Levels) or table.empty(Clans.Data)) then
					return
				end
				loader:kill()
				Clans:showMain(viewElement, clantag)
			end)
		local loadingText = loader:addChild({
			shift = { loader.size.w / 4, loader.size.h / 3 }
		})
		TBMenu:displayLoadingMark(loadingText, TB_MENU_LOCALIZED.CLANSUPDATINGWAIT)
		return
	end

	if (clantag) then
		local clanid
		for _, v in pairs(Clans.Data) do
			if (v.tag == clantag) then
				clanid = v.id
				break
			end
		end
		Clans:showClan(viewElement, clanid)
		return
	end

	viewElement:kill(true)
	local clanListSettings = viewElement:addChild({
		pos = { 5, 0 },
		size = { viewElement.size.w * 0.3 - 10, viewElement.size.h },
		bgColor = TB_MENU_DEFAULT_BG_COLOR
	})
	Clans:showUserClan(clanListSettings)
	local clanView = viewElement:addChild({
		pos = { viewElement.size.w * 0.3 + 5, 0 },
		size = { viewElement.size.w * 0.7 - 10, viewElement.size.h },
		bgColor = TB_MENU_DEFAULT_BG_COLOR
	})
	Clans:showClanList(clanView)
end

---Displays current player's clan information in a viewport UIElement
---@param viewElement UIElement
function Clans:showUserClan(viewElement)
	TBMenu:addBottomBloodSmudge(viewElement, 1)
	local clanid = TB_MENU_PLAYER_INFO.clan.id
	local buttonHeight = math.min(viewElement.size.h / 6, 50)

	if (clanid ~= 0) then
		local userClanTitle = viewElement:addChild({
			size = { viewElement.size.w, viewElement.size.h / 8 }
		})
		userClanTitle:addAdaptedText(true, TB_MENU_LOCALIZED.CLANSMYCLAN, nil, nil, FONTS.BIG, nil, 0.7, nil, 0.5)
		local clanView = viewElement:addChild({
			pos = { 0, viewElement.size.h / 8 },
			size = { viewElement.size.w, viewElement.size.h * 0.75 }
		})
		if (clanView.size.h * 0.67 > 60) then
			local iconSize = math.min(256, math.floor(clanView.size.h / 3 * 2))
			local clanLogo = clanView:addChild({
				pos = { (clanView.size.w - iconSize) / 2, 0 },
				size = { iconSize, iconSize },
				bgImage =  { "../textures/clans/" .. clanid .. ".tga", Clans.DefaultLogo }
			})
			Clans:loadClanLogo(clanid, clanLogo)
		end
		local clanInfo = clanView:addChild({
			pos = { 15, clanView.size.h / 3 * 2 },
			size = { clanView.size.w - 30, clanView.size.h / 3 }
		})
		local clanName = clanInfo:addChild({
			size = { clanInfo.size.w, clanInfo.size.h / 2 }
		})
		clanName:addAdaptedText(true, TB_MENU_PLAYER_INFO.clan.name, nil, nil, FONTS.BIG, nil, 0.8)
		local memberStatus = clanInfo:addChild({
			pos = { 0, clanName.shift.y + clanName.size.h },
			size = { clanInfo.size.w, clanInfo.size.h - clanName.size.h - clanName.shift.y * 2 },
		})
		local clanData = Clans.Data[clanid]
		local otherMembers, targetData = {}, (TB_MENU_PLAYER_INFO.clan.isleader and clanData.leaders or clanData.members)
		if (clanData and #targetData > 1) then
			local members = {}
			for _, v in pairs(targetData) do
				if (string.lower(v) ~= string.lower(TB_MENU_PLAYER_INFO.username)) then
					table.insert(members, v)
				end
			end
			local id = math.random(1, #members)
			table.insert(otherMembers, members[id])
			table.remove(members, id)
			if (#members > 0) then
				table.insert(otherMembers, members[math.random(1, #members)])
			end
		end
		if (#otherMembers > 0) then
			memberStatus.size.h = memberStatus.size.h / 2
			memberStatus:addChild({
				pos = { 0, memberStatus.size.h },
				size = { memberStatus.size.w, memberStatus.size.h }
			}):addAdaptedText(true, TB_MENU_LOCALIZED.CLANSTOGETHERWITH .. " " .. table.implode(otherMembers, " " .. TB_MENU_LOCALIZED.GENERALSTRINGAND .. " "), nil, nil, 4, CENTERMID, 0.65)
		end
		memberStatus:addAdaptedText(true, TB_MENU_PLAYER_INFO.clan.isleader and TB_MENU_LOCALIZED.CLANSCLANLEADER or TB_MENU_LOCALIZED.CLANSCLANMEMBER, nil, nil, 4, CENTERMID)

		local clanButton = viewElement:addChild({
			pos = { 15, -buttonHeight - 20 },
			size = { viewElement.size.w - 30, buttonHeight },
			interactive = true,
			hoverSound = 31,
			bgColor = TB_MENU_DEFAULT_DARKER_COLOR,
			hoverColor = TB_MENU_DEFAULT_DARKEST_COLOR,
			pressedColor = TB_MENU_DEFAULT_LIGHTER_COLOR,
			shapeType = ROUNDED,
			rounded = 4
		})
		clanButton:addAdaptedText(TB_MENU_LOCALIZED.CLANSVIEWCLAN)
		clanButton:addMouseUpHandler(function()
				Clans:showClan(viewElement.parent, TB_MENU_PLAYER_INFO.clan.id)
			end)
	else
		local noClanHeader = viewElement:addChild({
			pos = { viewElement.size.w * 0.1, viewElement.size.h / 8 },
			size = { viewElement.size.w * 0.8, viewElement.size.h / 4 }
		})
		noClanHeader:addAdaptedText(true, TB_MENU_LOCALIZED.CLANSPLAYERCLANLESS, nil, nil, FONTS.BIG)
		local noClanDesc = viewElement:addChild({
			pos = { noClanHeader.shift.x, noClanHeader.shift.y + noClanHeader.size.h },
			size = { noClanHeader.size.w, noClanHeader.size.h }
		})
		noClanDesc:addAdaptedText(true, TB_MENU_LOCALIZED.CLANSPLAYERCLANLESSINFOMSG)
		local makeNewClan = viewElement:addChild({
			pos = { 15, -buttonHeight - 20 },
			size = { viewElement.size.w - 30, buttonHeight },
			interactive = true,
			hoverSound = 31,
			bgColor = TB_MENU_DEFAULT_DARKER_COLOR,
			hoverColor = TB_MENU_DEFAULT_DARKEST_COLOR,
			pressedColor = TB_MENU_DEFAULT_LIGHTER_COLOR,
			shapeType = ROUNDED,
			rounded = 4
		})
		TBMenu:showTextExternal(makeNewClan, TB_MENU_LOCALIZED.CLANSCREATENEWCLAN)
		makeNewClan:addMouseUpHandler(function()
				open_url("http://forum.toribash.com/clan_register.php")
			end)
	end
end

---@class ClanFilter
---@field strict boolean
---@field val integer|boolean

---@class ClanListFilters
---@field is_active ClanFilter
---@field join_mode ClanFilter
---@field is_official ClanFilter
---@field sortby string
---@field desc boolean

---Returns default clan list filters
---@return ClanListFilters
function Clans:getDefaultFilters()
	return {
		is_active = { strict = true, val = 2 },
		join_mode = { strict = false, val = 0 },
		is_official = { strict = false, val = false },
		sortby = "rank",
		desc = false
	}
end

---Populates clan list according to filter values
---@param opt ?ClanListFilters
---@return Clan[]
function Clans:populateClanList(opt)
	---@type Clan[]
	local list = {}
	local options = Clans:getDefaultFilters()
	if (opt) then
		for i,v in pairs(opt) do
			if (i ~= "sortby" and i ~= "desc") then
				options[i].val = v
			else
				options[i] = v
			end
		end
	end
	for _, v in pairs(Clans.Data) do
		local check = true
		for j, z in pairs(options) do
			if (type(z) == "table") then
				if (type(v[j]) == "number" and ((z.strict and z.val ~= v[j]) or (not z.strict and z.val > v[j]))) then
					check = false
					break
				elseif (type(v[j]) == "boolean" and ((z.strict and z.val ~= v[j]) or (not z.strict and z.val == true and v[j] == false))) then
					check = false
					break
				end
			end
		end
		if (check) then
			table.insert(list, v)
		end
	end
	return table.qsort(list, options.sortby, options.desc)
end

---Displays clan list filters
---@param viewElement UIElement
---@param opt ?ClanListFilters
function Clans:showClanListFilters(viewElement, opt)
	viewElement:kill(true)
	local options = {}
	if (opt) then
		options = opt
	else
		local opts = Clans:getDefaultFilters()
		options = {
			is_active = opts.is_active.val,
			join_mode = opts.join_mode.val,
			is_official = opts.is_official.val,
			sortby = opts.sortby,
			desc = opts.desc
		}
	end

	options.is_active = options.is_active
	options.desc = options.desc and SORT_DESCENDING or SORT_ASCENDING

	---@type DropdownElement[]
	local sortOptions = {
		{
			text = TB_MENU_LOCALIZED.CLANFILTERSRANK,
			action = function() options.sortby = "rank" end,
			selected = options.sortby == "rank"
		},
		{
			text = TB_MENU_LOCALIZED.CLANFILTERSCLANNAME,
			action = function() options.sortby = "name" end,
			selected = options.sortby == "name"
		},
		{
			text = TB_MENU_LOCALIZED.CLANFILTERSCLANTAG,
			action = function() options.sortby = "tag" end,
			selected = options.sortby == "tag"
		},
		{
			text = TB_MENU_LOCALIZED.CLANFILTERSCLANID,
			action = function() options.sortby = "id" end,
			selected = options.sortby == "id"
		},
		{
			text = TB_MENU_LOCALIZED.CLANFILTERSOFFICIALSTATUS,
			action = function() options.sortby = "is_official" end,
			selected = options.sortby == "is_official"
		},
		{
			text = TB_MENU_LOCALIZED.CLANFILTERSJOINMODE,
			action = function() options.sortby = "join_mode" end,
			selected = options.sortby == "join_mode"
		}
	}
	---@type DropdownElement
	local sortOrder = {
		{
			text = TB_MENU_LOCALIZED.SORTORDERASCENDING,
			action = function() options.desc = SORT_ASCENDING end,
			selected = options.desc == SORT_ASCENDING
		},
		{
			text = TB_MENU_LOCALIZED.SORTORDERDESCENDING,
			action = function() options.desc = SORT_DESCENDING end,
			selected = options.desc == SORT_DESCENDING
		}
	}
	local optData = {
		{ opt = "join_mode", name = TB_MENU_LOCALIZED.CLANFILTERSFFAONLY, desc = TB_MENU_LOCALIZED.CLANFILTERSFFAONLYDESC, },
		{ opt = "is_official", name = TB_MENU_LOCALIZED.CLANFILTERSOFFICIALONLY, desc = TB_MENU_LOCALIZED.CLANFILTERSOFFICIALONLYDESC, },
		{ opt = "sortby", name = TB_MENU_LOCALIZED.SORTBYNAME, customSelection = sortOptions },
		{ opt = "desc", name = TB_MENU_LOCALIZED.SORTORDERNAME, customSelection = sortOrder }
	}

	local elementHeight = 50
	local toReload, topBar, botBar, listingView, listingHolder, listingScrollBG = TBMenu:prepareScrollableList(viewElement, 60, 60, 20, TB_MENU_DEFAULT_BG_COLOR)

	local filtersTitle = topBar:addChild({
		shift = { topBar.size.h, 5 }
	})
	filtersTitle:addAdaptedText(true, TB_MENU_LOCALIZED.CLANSSEARCHFILTERS, nil, nil, FONTS.BIG, CENTERMID, 0.7, nil, 0.5)
	local filtersButton = topBar:addChild({
		pos = { -topBar.size.h + 10, 10 },
		size = { topBar.size.h - 20, topBar.size.h - 20 },
		interactive = true,
		bgImage = "../textures/menu/general/buttons/filters.tga",
		bgColor = TB_MENU_DEFAULT_DARKER_COLOR,
		hoverColor = TB_MENU_DEFAULT_DARKEST_COLOR,
		pressedColor = TB_MENU_DEFAULT_LIGHTER_COLOR,
		shapeType = ROUNDED,
		rounded = 4
	})
	filtersButton:addMouseUpHandler(function()
			Clans:showClanList(viewElement, options)
		end)
	TBMenu:addBottomBloodSmudge(botBar, 2)

	local listElements = {}
	for _, v in pairs(optData) do
		local listFilterElement = listingHolder:addChild({
			pos = { 0, #listElements * elementHeight },
			size = { listingHolder.size.w, elementHeight }
		})
		table.insert(listElements, listFilterElement)
		local filterBackground = listFilterElement:addChild({
			pos = { 10, 3 },
			size = { listFilterElement.size.w - 10, listFilterElement.size.h - 6 },
			bgColor = TB_MENU_DEFAULT_DARKER_COLOR,
			shapeType = ROUNDED,
			rounded = 4
		})
		local filterName = filterBackground:addChild({
			pos = { 10, 6 },
			size = { (filterBackground.size.w - 30) / 2, filterBackground.size.h - 12 }
		})
		filterName:addAdaptedText(true, v.name, nil, nil, nil, LEFTMID)

		if (v.desc) then
			filterBackground.size.h = listFilterElement.size.h - filterBackground.shift.y
			filterBackground:setRounded({ filterBackground.rounded, 0 })
			local filterDescriptionHolder = listingHolder:addChild({
				pos = { 0, #listElements * elementHeight },
				size = { listingHolder.size.w, elementHeight }
			})
			table.insert(listElements, filterDescriptionHolder)
			local filterDescBackground = filterDescriptionHolder:addChild({
				pos = { filterBackground.shift.x, 0 },
				size = { filterBackground.size.w, filterBackground.size.h },
				bgColor = filterBackground.bgColor,
				shapeType = filterBackground.shapeType,
				rounded = { 0, filterBackground.roundedInternal[1] }
			})
			filterDescBackground:addChild({
				shift = { 10, 6 }
			}):addAdaptedText(true, v.desc, nil, nil, FONTS.LMEDIUM, LEFT, 0.75)
		end

		if (v.customSelection) then
			local dropdownHolder = filterBackground:addChild({
				pos = { -filterName.size.w - filterName.shift.y, filterName.shift.y },
				size = { filterName.size.w, filterName.size.h },
				bgColor = TB_MENU_DEFAULT_DARKEST_COLOR,
				shapeType = ROUNDED,
				rounded = 4
			})
			TBMenu:spawnDropdown(dropdownHolder:addChild({ shift = { 1, 1 }, bgColor = TB_MENU_DEFAULT_BG_COLOR }, true), v.customSelection, dropdownHolder.size.h, nil, nil, {
				fontid = FONTS.MEDIUM,
				scale = 0.9
			}, {
				scale = 0.7
			})
		else
			local checkboxSize = filterBackground.size.h - filterName.shift.y * 2
			local checkboxHolder = filterBackground:addChild({
				pos = { -checkboxSize - filterName.shift.y, filterName.shift.y },
				size = { checkboxSize, checkboxSize },
				bgColor = TB_MENU_DEFAULT_DARKER_COLOR,
				shapeType = ROUNDED,
				rounded = 4
			})
			TBMenu:spawnToggle(checkboxHolder, nil, nil, nil, nil, options[v.opt], function(val)
					options[v.opt] = val
				end)
		end
	end

	for _, v in pairs(listElements) do
		v:hide()
	end

	local filtersScrollBar = TBMenu:spawnScrollBar(listingHolder, #listElements, elementHeight)
	listingHolder.scrollBar = filtersScrollBar
	filtersScrollBar:makeScrollBar(listingHolder, listElements, toReload)

	local searchButton = botBar:addChild({
		shift = { botBar.size.w / 4, 10 },
		interactive = true,
		bgColor = TB_MENU_DEFAULT_DARKER_COLOR,
		hoverColor = TB_MENU_DEFAULT_DARKEST_COLOR,
		pressedColor = TB_MENU_DEFAULT_LIGHTER_COLOR,
		shapeType = ROUNDED,
		rounded = 4,
		hoverSound = 31
	})
	searchButton:addAdaptedText(TB_MENU_LOCALIZED.CLANSSEARCH)
	searchButton:addMouseUpHandler(function()
			CLANLISTSHIFT[1] = 0
			Clans:showClanList(viewElement, options)
		end)
end

---Displays clan list in a UIElement viewport
---@param viewElement UIElement
---@param options ?ClanListFilters
function Clans:showClanList(viewElement, options)
	viewElement:kill(true)
	TB_MENU_SPECIAL_SCREEN_ISOPEN = 0

	Clans.SearchFilters = options or Clans.SearchFilters
	local clanList = Clans:populateClanList(Clans.SearchFilters)

	local elementHeight = 45
	local toReload, topBar, botBar, listingView, listingHolder, listingScrollBG = TBMenu:prepareScrollableList(viewElement, 60 + elementHeight / 2, elementHeight, 20, TB_MENU_DEFAULT_BG_COLOR)
	TBMenu:addBottomBloodSmudge(botBar, 2)

	local listTitle = topBar:addChild({
		pos = { topBar.size.h, 5 },
		size = { topBar.size.w - topBar.size.h * 2, topBar.size.h - (elementHeight / 2) - 10 }
	})
	listTitle:addAdaptedText(true, TB_MENU_LOCALIZED.CLANSCLANLIST, nil, nil, FONTS.BIG, CENTERMID, 0.7, nil, 0.5)
	local filtersButton = topBar:addChild({
		pos = { -listTitle.size.h, 10 },
		size = { listTitle.size.h - 10, listTitle.size.h - 10 },
		interactive = true,
		bgImage = "../textures/menu/general/buttons/filtersoutline.tga",
		bgColor = TB_MENU_DEFAULT_DARKER_COLOR,
		hoverColor = TB_MENU_DEFAULT_DARKEST_COLOR,
		pressedColor = TB_MENU_DEFAULT_LIGHTER_COLOR,
		shapeType = ROUNDED,
		rounded = 4
	})
	filtersButton:addMouseUpHandler(function()
			Clans:showClanListFilters(viewElement, options)
		end)

	local legendFields = {
		{
			text = TB_MENU_LOCALIZED.CLANSLEGENDRANK,
			width = 55
		},
		{
			text = TB_MENU_LOCALIZED.CLANSLEGENDTAGNAME,
			width = (listingHolder.size.w - 67) * 0.6
		},
		{
			text = TB_MENU_LOCALIZED.CLANSLEGENDSTATUS,
			width = (listingHolder.size.w - 67) * 0.2
		},
		{
			text = TB_MENU_LOCALIZED.CLANSLEGENDJOINMODE,
			width = (listingHolder.size.w - 67) * 0.2
		}
	}

	local legendHolder = topBar:addChild({
		pos = { 0, -elementHeight / 2 },
		size = { listingHolder.size.w, elementHeight / 2 }
	})
	local xShift = 10
	for _, v in pairs(legendFields) do
		legendHolder:addChild({
			pos = { xShift, 0 },
			size = { v.width, legendHolder.size.h }
		}):addAdaptedText(true, v.text, nil, nil, nil, nil, 0.7)
		xShift = xShift + v.width
	end

	if (#clanList > 0) then
		local listElements = {}
		for _, clan in pairs(clanList) do
			local buttonHolder = listingHolder:addChild({
				pos = { 0, #listElements * elementHeight },
				size = { listingHolder.size.w, elementHeight }
			})
			table.insert(listElements, buttonHolder)

			local buttonBackground = buttonHolder:addChild({
				pos = { 10, 2 },
				size = { buttonHolder.size.w - 12, buttonHolder.size.h - 4 },
				interactive = true,
				clickThrough = true,
				hoverThrough = true,
				bgColor = TB_MENU_DEFAULT_DARKER_COLOR,
				hoverColor = TB_MENU_DEFAULT_DARKEST_COLOR,
				pressedColor = TB_MENU_DEFAULT_LIGHTER_COLOR,
				shapeType = ROUNDED,
				rounded = 4
			})
			buttonBackground:addMouseUpHandler(function()
					Clans:showClan(viewElement.parent, clan.id)
				end)

			local rankDisplay = buttonBackground:addChild({
				pos = { 0, 0 },
				size = { legendFields[1].width, buttonBackground.size.h }
			})
			local rankString = clan.rank == 0 and "-" or tostring(clan.rank)
			rankDisplay:addAdaptedText(true, rankString, nil, nil, 4, CENTERMID, 0.7)

			local nameTagDisplay = buttonBackground:addChild({
				pos = { rankDisplay.shift.x + rankDisplay.size.w, 0 },
				size = { legendFields[2].width, buttonBackground.size.h }
			})
			local tagDisplay = nameTagDisplay:addChild({
				pos = { 0, 0 },
				size = { nameTagDisplay.size.w / 2 - 8, nameTagDisplay.size.h }
			})
			local nameDisplay = nameTagDisplay:addChild({
				pos = { -tagDisplay.size.w, 0 },
				size = { tagDisplay.size.w, nameTagDisplay.size.h }
			})
			nameTagDisplay:addAdaptedText(true, "|", nil, nil, 4, CENTERMID, 0.5)
			tagDisplay:addAdaptedText(true, clan.tag, nil, nil, 4, RIGHTMID, 0.7)
			nameDisplay:addAdaptedText(true, clan.name, nil, nil, 4, LEFTMID, 0.7)

			local statusDisplay = buttonBackground:addChild({
				pos = { nameTagDisplay.shift.x + nameTagDisplay.size.w, 0 },
				size = { legendFields[3].width, buttonBackground.size.h }
			})
			local statusString = clan.is_official and TB_MENU_LOCALIZED.CLANSTATEOFFICIAL or TB_MENU_LOCALIZED.CLANSTATEUNOFFICIAL
			statusDisplay:addAdaptedText(true, statusString, nil, nil, 4, CENTERMID, 0.7)

			local joinModeDisplay = buttonBackground:addChild({
				pos = { statusDisplay.shift.x + statusDisplay.size.w, 0 },
				size = { legendFields[4].width, buttonBackground.size.h }
			})
			local joinModeString = clan.join_mode == 1 and TB_MENU_LOCALIZED.CLANSTATEFREEFORALL or TB_MENU_LOCALIZED.CLANSTATEINVITEONLY
			joinModeDisplay:addAdaptedText(true, joinModeString, nil, nil, 4, CENTERMID, 0.7)

			buttonHolder:hide()
		end

		local scrollBar = TBMenu:spawnScrollBar(listingHolder, #listElements, elementHeight)
		listingHolder.scrollBar = scrollBar
		scrollBar:makeScrollBar(listingHolder, listElements, toReload)
	else
		listingHolder:addAdaptedText(TB_MENU_LOCALIZED.CLANSLISTEMPTYMSG)
	end
end

---Displays the left section of the clan info screen
---@param viewElement UIElement
---@param clanid integer
function Clans:showClanInfoLeft(viewElement, clanid)
	TBMenu:addBottomBloodSmudge(viewElement, 2)
	local clanName = UIElement:new({
		parent = viewElement,
		pos = { 10, 10 },
		size = { viewElement.size.w - 20, 60 }
	})
	local clanTag = Clans.Data[clanid].is_official == 1 and "[" .. Clans.Data[clanid].tag .. "]" or "(" .. Clans.Data[clanid].tag .. ")"
	clanName:addAdaptedText(true, clanTag .. " " .. Clans.Data[clanid].name, nil, nil, FONTS.BIG, nil, 0.6, nil, 0.2)
	local joinInteractive = false
	if (Clans.Data[clanid].join_mode == 1 and TB_MENU_PLAYER_INFO.clan.id ~= 0 and (Clans.Data[clanid].members_total < Clans.Levels[math.min(#Clans.Levels, Clans.Data[clanid].level + 1)].max_members or Clans:isBeginnerClan(clanid))) then
		joinInteractive = true
	end
	local clanJoin = UIElement:new({
		parent = viewElement,
		pos = { 10, -80 },
		size = { viewElement.size.w - 20, 70 },
		interactive = joinInteractive,
		bgColor = { 0, 0, 0, 0.1 },
		hoverColor = { 0, 0, 0, 0.3 },
		pressedColor = { 1, 0, 0, 0.1 }
	})
	if (joinInteractive) then
		clanJoin:addAdaptedText(false, TB_MENU_LOCALIZED.CLANSJOINCLAN)
		clanJoin:addMouseHandlers(nil, function()
				open_url("http://forum.toribash.com/clan.php?clanid=" .. clanid .. "&join=1")
			end)
	elseif (Clans.Data[clanid].join_mode == 1) then
		clanJoin:addAdaptedText(false, TB_MENU_LOCALIZED.CLANSTATEFREEFORALL, nil, nil, nil, nil, nil, nil, 0.2)
	else
		clanJoin:addAdaptedText(false, TB_MENU_LOCALIZED.CLANSTATEINVITEONLY, nil, nil, nil, nil, nil, nil, 0.2)
	end

	local freeSpace = viewElement.size.h - clanName.shift.y - clanName.size.h - clanJoin.size.h - 30
	local logoScale = 256 > freeSpace and freeSpace or 256
	local clanLogo = UIElement:new({
		parent = viewElement,
		pos = { (viewElement.size.w - logoScale) / 2, clanName.size.h + clanName.shift.y + 10 + (freeSpace - logoScale) / 2 },
		size = { logoScale, logoScale },
		bgImage =  { "../textures/clans/"..clanid..".tga", Clans.DefaultLogo }
	})
	Clans:loadClanLogo(clanid, clanLogo)
	local logoReload = UIElement:new({
		parent = clanLogo,
		pos = { 0, 0 },
		size = { clanLogo.size.w, clanLogo.size.h },
		interactive = true,
		bgColor = { 0, 0, 0, 0 },
		hoverColor = { 0, 0, 0, 0.3 },
		pressedColor = { 1, 0, 0, 0.1 }
	})
	logoReload:addCustomDisplay(true, function()
			local color = logoReload:getButtonColor()
			set_color(unpack(color))
			draw_quad(logoReload.pos.x, logoReload.pos.y, logoReload.size.w, logoReload.size.h)
			logoReload:uiText(TB_MENU_LOCALIZED.CLANSRELOADLOGO, nil, nil, nil, nil, nil, nil, nil, {1, 1, 1, color[4] * 2} )
		end)
	logoReload:addMouseHandlers(nil, function()
			Clans:loadClanLogo(clanid, clanLogo, true)
		end, nil)
end

---Displays the middle section of the clan info screen
---@param viewElement UIElement
---@param clanid integer
function Clans:showClanInfoMid(viewElement, clanid)
	local clanLevelValue = Clans.Data[clanid].level
	local clanTopAch = Clans.Data[clanid].top_achievement
	local xpBarProgress = 0
	if (clanLevelValue < #Clans.Levels) then
		xpBarProgress = (Clans.Data[clanid].xp - Clans.Levels[clanLevelValue].min_xp) / (Clans.Levels[clanLevelValue + 1].min_xp - Clans.Levels[clanLevelValue].min_xp)
		if (xpBarProgress > 1) then
			xpBarProgress = 1
		end
	else
		xpBarProgress = 1
	end

	TBMenu:addBottomBloodSmudge(viewElement, 1)
	local clanRank = UIElement:new( {
		parent = viewElement,
		pos = { 40, 10 },
		size = { (viewElement.size.w - 80) / 2, 35 }
	})
	local clanRankText = TB_MENU_LOCALIZED.CLANSLEGENDRANK .. " "..Clans.Data[clanid].rank
	if (Clans.Data[clanid].rank < 1) then
		clanRankText = TB_MENU_LOCALIZED.CLANSTATEUNRANKED
	end
	clanRank:addAdaptedText(true, clanRankText, nil, nil, FONTS.BIG, LEFTMID, nil, nil, 0.2)
	local clanLevel = UIElement:new({
		parent = viewElement,
		pos = { viewElement.size.w / 2, 10 },
		size = { (viewElement.size.w - 80) / 2, 35}
	})
	clanLevel:addAdaptedText(false, TB_MENU_LOCALIZED.CLANSLEGENDLEVEL .. " " .. clanLevelValue, nil, nil, FONTS.BIG, RIGHTMID, nil, nil, 0.2)
	local clanXpBarOutline = UIElement:new( {
		parent = viewElement,
		pos = { 30, 50 },
		size = { viewElement.size.w - 60, 60 },
		bgColor = { 0.1, 0.1, 0.1, 0.5 },
		shapeType = ROUNDED,
		rounded = 10
	})
	local clanXpBar = UIElement:new({
		parent = clanXpBarOutline,
		pos = { 2, 2 },
		size = { clanXpBarOutline.size.w - 4, clanXpBarOutline.size.h - 4 },
		bgColor = Clans.Data[clanid].xpBarBgColor or { 0.5, 0.1, 0.1, 1 },
		shapeType = clanXpBarOutline.shapeType,
		rounded = clanXpBarOutline.rounded / 5 * 4 })
	if (xpBarProgress > 0) then
		clanXpBar:addChild({
			size = { clanXpBar.size.w * xpBarProgress, clanXpBar.size.h },
			bgColor = Clans.Data[clanid].xpBarColor or { 0.78, 0.05, 0.08, 1 },
			innerShadow = { 4, 4 },
			shadowColor = { Clans.Data[clanid].xpBarAccentTopColor or { 0.91, 0.34, 0.24, 1 }, Clans.Data[clanid].xpBarAccentBotColor or { 0.33, 0, 0, 1 } }
		}, true)
	end

	local clanXp = UIElement:new( {
		parent = clanXpBar,
		pos = { 0, 0 },
		size = { clanXpBar.size.w, clanXpBar.size.h } } )
	local clanXpStr = Clans.Data[clanid].xp
	if (clanLevelValue < #Clans.Levels) then
		clanXpStr = clanXpStr .. " / " .. Clans.Levels[clanLevelValue + 1].min_xp .. " " .. TB_MENU_LOCALIZED.CLANSLEGENDXP
	else
		clanXpStr = clanXpStr .. " " .. TB_MENU_LOCALIZED.CLANSLEGENDXP
	end
	clanXp:addAdaptedText(false, clanXpStr, nil, nil, FONTS.BIG, nil, 0.65, nil, nil, 2)
	local clanWars = UIElement:new({
		parent = viewElement,
		pos = { 30, 120 },
		size = { viewElement.size.w - 60, (viewElement.size.h - 140) / 2 },
		interactive = true,
		bgColor = { 0, 0, 0, 0.1 },
		hoverColor = { 0, 0, 0, 0.3 },
		pressedColor = { 1, 0, 0, 0.1 }
	})
	clanWars:addAdaptedText(false, TB_MENU_LOCALIZED.CLANSVIEWWARSFORUM, nil, nil, FONTS.BIG, nil, 0.8, nil, 0.6)
	clanWars:addMouseHandlers(nil, function()
			open_url("http://forum.toribash.com/clan_war.php?clanid=" .. clanid)
		end)
	local clanTopAchievement = UIElement:new({
		parent = viewElement,
		pos = { 30, -(viewElement.size.h - 120) / 2 },
		size = { viewElement.size.w - 60, (viewElement.size.h - 140) / 2 }
	})
	if (clanTopAch ~= 0) then
		local iconScale = clanTopAchievement.size.h >= 110 and 100 or clanTopAchievement.size.h - 10
		local clanTopAchIcon = UIElement:new({
			parent = clanTopAchievement,
			pos = { 10, (clanTopAchievement.size.h - iconScale) / 2 },
			size = { iconScale, iconScale },
			bgImage = "../textures/clans/achievements/" .. clanTopAch .. ".tga"
		})
		local clanTopAchName = UIElement:new({
			parent = clanTopAchievement,
			pos = { iconScale + 10, 0 },
			size = { clanTopAchievement.size.w - iconScale - 20, clanTopAchievement.size.h / 2 - 5 }
		})
		clanTopAchName:addCustomDisplay(false, function()
			clanTopAchName:uiText(Clans.Achievements[clanTopAch].name, nil, nil, nil, CENTERBOT)
		end)
		local clanTopAchDesc = UIElement:new({
			parent = clanTopAchievement,
			pos = { iconScale + 30, clanTopAchievement.size.h / 2 + 5 },
			size = { clanTopAchievement.size.w - iconScale - 60, clanTopAchievement.size.h / 2 - 5 },
		})
		clanTopAchDesc:addCustomDisplay(false, function()
			clanTopAchDesc:uiText(Clans.Achievements[clanTopAch].description, nil, nil, 4, CENTER, 0.7)
		end)
	else
		local clanTopAchDesc = UIElement:new({
			parent = clanTopAchievement,
			pos = { 10, 0 },
			size = { clanTopAchievement.size.w - 20, clanTopAchievement.size.h }
		})
		clanTopAchDesc:addCustomDisplay(false, function()
				clanTopAchDesc:uiText(TB_MENU_LOCALIZED.CLANSTOPACHMISSING, nil, nil, 4, nil, 0.7)
			end)
	end
end

---@class ClansPlayerHeadPreview : UIElement3D
---@field player string Player's name

---Helper function that will be called recursively to download and set head avatars for clan members
---@param reloader UIElement
---@param avatars ClansPlayerHeadPreview[]
---@param id integer
function Clans.downloadHead(reloader, avatars, id)
	local downloads = get_downloads()
	if (#downloads == 0) then
		local customs = PlayerInfo:getItems(avatars[id].player, PLAYERINFO_CSCOPE_TEXTURES)
		if (customs.textures.head.equipped) then
			avatars[id]:updateImage("../../custom/" .. avatars[id].player:lower() .. "/head.tga", nil, true)
		end
		if (id < #avatars) then
			id = id + 1
			download_head(avatars[id].player)
			reloader:addCustomDisplay(false, function() Clans.downloadHead(reloader, avatars, id) end)
		else
			reloader:kill()
		end
	end
end

---Downloads and resets head avatars for the provided elements
---@param avatars ClansPlayerHeadPreview[]
function Clans:reloadHeadAvatars(avatars)
	for i = #avatars, 1, -1 do
		if (avatars[i].player == TB_MENU_PLAYER_INFO.username) then
			table.remove(avatars, i)
			break
		end
	end
	if (#avatars > 0) then
		if (avatars[1].player) then
			download_head(avatars[1].player)
		end
		local reloader = UIElement:new({
			parent = TBMenu.CurrentSection,
			pos = { 0, 0 },
			size = { 1, 1 }
		})
		reloader:addCustomDisplay(false, function() Clans.downloadHead(reloader, avatars, 1) end)
	end
end

---Displays player head in a specified UIElement viewport
---@param parent UIElement
---@param avatarWidth integer
---@param user string
---@return UIElement3D
function Clans:showPlayerAvatar(parent, avatarWidth, user)
	local avatarViewport = UIElement:new( {
		parent = parent,
		pos = { 0, 0 },
		size = { avatarWidth, avatarWidth },
		viewport = true
	})
	local avatarViewport3D = UIElement3D:new({
		globalid = TB_MENU_MAIN_GLOBALID,
		shapeType = VIEWPORT,
		parent = avatarViewport,
		pos = { 0, 0, 0 },
		size = { 0, 0, 0 },
		rot = { 0, 0, 0 },
		viewport = true
	})
	table.insert(avatarViewport.child, avatarViewport3D)
	local headTexture = { "../../custom/tori/head.tga", "../../custom/tori/head.tga" }
	local player = PlayerInfo:getItems(user, PLAYERINFO_CSCOPE_TEXTURES)
	if (player.textures.head.equipped) then
		headTexture[1] = "../../custom/" .. user .. "/head.tga"
	end
	local avatar = UIElement3D:new({
		parent = avatarViewport3D,
		shapeType = SPHERE,
		pos = { 0, 0, 10 },
		rot = { 0, 0, 0 },
		size = { 1, 0, 0 },
		bgColor = { 1, 1, 1, 1 },
		bgImage = headTexture,
		viewport = true
	})
	avatar.player = user
	return avatar
end

---Displays member list for clan information screen
---@param viewElement UIElement
---@param clanid integer
function Clans:showClanMemberlist(viewElement, clanid)
	local rosterEntryHeight = 40
	local avatarWidth = rosterEntryHeight

	local toReload, rosterTop, rosterBottom, rosterView, rosterMemberHolder, rosterScrollBG = TBMenu:prepareScrollableList(viewElement, 50, rosterEntryHeight, 15, Clans.Data[clanid].bgColor)
	local rosterTitle = UIElement:new({
		parent = rosterTop,
		pos = { avatarWidth, 0 },
		size = { rosterTop.size.w - avatarWidth * 2, rosterTop.size.h }
	})
	local rosterStr = TB_MENU_LOCALIZED.CLANSLEGENDROSTER .. (Clans:isBeginnerClan(clanid) and (" (" .. Clans.Data[clanid].members_total .. ")") or (" (" .. Clans.Data[clanid].members_total .. "/" .. Clans.Levels[Clans.Data[clanid].level].max_members .. ")"))
	rosterTitle:addAdaptedText(true, rosterStr, nil, nil, FONTS.BIG, nil, nil, nil, 0)

	local viewportTopReplacer = UIElement:new( {
		parent = rosterTop,
		pos = { 0, 0 },
		size = { avatarWidth, rosterTop.size.h },
		viewport = true
	})
	local viewportTopReplacer3D = UIElement3D:new({
		globalid = TB_MENU_MAIN_GLOBALID,
		shapeType = VIEWPORT,
		parent = viewportTopReplacer,
		pos = { 0, 0, 0 },
		size = { 0, 0, 0 },
		rot = { 0, 0, 0 },
		viewport = true
	})
	table.insert(viewportTopReplacer.child, viewportTopReplacer3D)
	if (get_option("shaders") == 1) then
		local cube = UIElement3D:new({
			parent = viewportTopReplacer3D,
			pos = { 0, 0, 10 },
			size = { 2, 2, 2 },
			bgColor = Clans.Data[clanid].bgColor or TB_MENU_DEFAULT_DARKER_COLOR,
			viewport = true
		})
		local viewportBotReplacer = UIElement:new( {
			parent = rosterBottom,
			pos = { 0, 0 },
			size = { avatarWidth, avatarWidth },
			viewport = true
		})
		local viewportBotReplacer3D = UIElement3D:new({
			globalid = TB_MENU_MAIN_GLOBALID,
			shapeType = VIEWPORT,
			parent = viewportBotReplacer,
			pos = { 0, 0, 0 },
			size = { 0, 0, 0 },
			rot = { 0, 0, 0 },
			viewport = true
		})
		table.insert(viewportBotReplacer.child, viewportBotReplacer3D)
		local cube2 = UIElement3D:new({
			parent = viewportBotReplacer3D,
			pos = { 0, 0, 10 },
			size = { 2, 2, 2 },
			bgColor = Clans.Data[clanid].bgColor or TB_MENU_DEFAULT_DARKER_COLOR,
			viewport = true
		})
	end
	TBMenu:addBottomBloodSmudge(rosterBottom, 3)

	local rosterMembers = {}
	local headAvatars = {}
	local rosterPos = 0
	if (#Clans.Data[clanid].leaders > 0) then
		local leadersTitle = UIElement:new({
			parent = rosterMemberHolder,
			pos = { 0, rosterPos },
			size = { rosterMemberHolder.size.w, rosterEntryHeight }
		})
		table.insert(rosterMembers, leadersTitle)
		rosterPos = rosterPos + rosterEntryHeight
		local leaderStr = utf8.len(Clans.Data[clanid].leaderscustom) > 0 and Clans.Data[clanid].leaderscustom or (#Clans.Data[clanid].leaders > 1 and TB_MENU_LOCALIZED.CLANLEADERS or TB_MENU_LOCALIZED.CLANLEADER)
		leadersTitle:addAdaptedText(true, leaderStr, nil, nil, nil, nil, nil, nil, 0.2)
		for _, v in pairs(Clans.Data[clanid].leaders) do
			local leader = UIElement:new({
				parent = rosterMemberHolder,
				pos = { 0, rosterPos },
				size = { rosterMemberHolder.size.w, rosterEntryHeight },
				bgColor = rosterPos % (rosterEntryHeight * 2 ) == 0 and { 0, 0, 0, 0.1 } or { 0, 0, 0, 0 }
			})
			table.insert(headAvatars, Clans:showPlayerAvatar(leader, avatarWidth, v))
			local leaderText = UIElement:new({
				parent = leader,
				pos = { avatarWidth + 5, 0 },
				size = { leader.size.w - avatarWidth - 10, leader.size.h }
			})
			leaderText:addAdaptedText(true, v, nil, nil, 4, LEFTMID, 0.7)
			table.insert(rosterMembers, leader)
			rosterPos = rosterPos + rosterEntryHeight
		end
	end
	if (#Clans.Data[clanid].members > 0) then
		local membersTitle = UIElement:new({
			parent = rosterMemberHolder,
			pos = { 0, rosterPos },
			size = { rosterMemberHolder.size.w, rosterEntryHeight }
		})
		table.insert(rosterMembers, membersTitle)
		rosterPos = rosterPos + rosterEntryHeight
		local memberStr = utf8.len(Clans.Data[clanid].memberscustom) > 0 and Clans.Data[clanid].memberscustom or (#Clans.Data[clanid].members > 1 and TB_MENU_LOCALIZED.CLANMEMBERS or TB_MENU_LOCALIZED.CLANMEMBER)
		membersTitle:addAdaptedText(true, memberStr, nil, nil, nil, nil, nil, nil, 0.2)
		for _, v in pairs(Clans.Data[clanid].members) do
			local member = UIElement:new({
				parent = rosterMemberHolder,
				pos = { 0, rosterPos },
				size = { rosterMemberHolder.size.w, rosterEntryHeight },
				bgColor = rosterPos % (rosterEntryHeight * 2 ) == 0 and { 0, 0, 0, 0.05 } or { 0, 0, 0, 0 }
			})
			table.insert(headAvatars, Clans:showPlayerAvatar(member, avatarWidth, v))
			local memberText = UIElement:new({
				parent = member,
				pos = { avatarWidth + 5, 0 },
				size = { member.size.w - avatarWidth - 10, member.size.h }
			})
			memberText:addAdaptedText(true, v, nil, nil, 4, LEFTMID, 0.7)
			table.insert(rosterMembers, member)
			rosterPos = rosterPos + rosterEntryHeight
		end
	end

	if (#rosterMembers > 0) then
		Clans:reloadHeadAvatars(headAvatars)

		for _, v in pairs(rosterMembers) do
			v:hide()
		end

		local rosterScrollBar = TBMenu:spawnScrollBar(rosterMemberHolder, #rosterMembers, rosterEntryHeight)
		rosterMemberHolder.scrollBar = rosterScrollBar
		rosterScrollBar:makeScrollBar(rosterMemberHolder, rosterMembers, toReload)
	else
		local clanMembersEmpty = UIElement:new({
			parent = rosterView,
			pos = { 0, 0 },
			size = { rosterView.size.w, rosterView.size.h }
		})
		clanMembersEmpty:addCustomDisplay(true, function()
				clanMembersEmpty:uiText(TB_MENU_LOCALIZED.CLANSMEMBERSEMPTY)
			end)
	end
end

---Displays clan information screen
---@param viewElement UIElement
---@param clanid integer
function Clans:showClan(viewElement, clanid)
	TB_MENU_CLANS_OPENCLANID = clanid
	TBMenu:clearNavSection()
	TBMenu:showNavigationBar(Clans:getNavigationButtons(), true)

	if (Clans.Data[clanid] == nil or Clans.Levels[1] == nil or Clans.Achievements[1] == nil) then
		Clans.Download()
		local loadingView = viewElement:addChild({
			pos = { 5, 0 },
			size = { viewElement.size.w - 10, viewElement.size.h },
			bgColor = TB_MENU_DEFAULT_BG_COLOR
		})
		TBMenu:displayLoadingMark(loadingView, TB_MENU_LOCALIZED.NETWORKLOADING)
		TBMenu:addBottomBloodSmudge(loadingView)
		loadingView:addCustomDisplay(function()
				if (Clans.Data[clanid] ~= nil and Clans.Levels[1] ~= nil and Clans.Achievements[1] ~= nil) then
					viewElement:kill(true)
					Clans:showClan(viewElement, clanid)
				end
			end)
		return
	end

	local clanView = viewElement:addChild({
		uiColor = Clans.Data[clanid].colorNegative and UICOLORBLACK or UICOLORWHITE,
		uiShadowColor = Clans.Data[clanid].colorNegative and UICOLORWHITE or UICOLORBLACK,
	})
	local clanInfoLeftView = clanView:addChild({
		pos = { 5, 0 },
		size = { 276, clanView.size.h },
		bgColor = Clans.Data[clanid].bgColor or TB_MENU_DEFAULT_BG_COLOR
	})
	Clans:showClanInfoLeft(clanInfoLeftView, clanid)
	local memberlistWidth = (clanView.size.w - clanInfoLeftView.size.w - 30) / 3 * 2 < 200 and 200 or (clanView.size.w - clanInfoLeftView.size.w - 30) / 3
	memberlistWidth = memberlistWidth > 276 and 276 or memberlistWidth
	local clanInfoMemberlistView = clanView:addChild({
		pos = { -memberlistWidth - 5, 0 },
		size = { memberlistWidth, clanView.size.h },
		bgColor = Clans.Data[clanid].bgColor or TB_MENU_DEFAULT_BG_COLOR
	})
	Clans:showClanMemberlist(clanInfoMemberlistView, clanid)
	local clanInfoMidView = clanView:addChild({
		pos = { clanInfoLeftView.size.w + clanInfoLeftView.shift.x + 10, 0 },
		size = { clanView.size.w - clanInfoLeftView.size.w - clanInfoMemberlistView.size.w - 30, clanView.size.h },
		bgColor = Clans.Data[clanid].bgColor or TB_MENU_DEFAULT_BG_COLOR
	})
	Clans:showClanInfoMid(clanInfoMidView, clanid)
end

---Downloads clan logo and refreshes its display upon completion
---@param clanid integer
---@param viewElement UIElement
---@param reload ?boolean
function Clans:loadClanLogo(clanid, viewElement, reload)
	for i = #LOGOCACHE, 1, -1 do
		if (LOGOCACHE[i] == clanid) then
			if (reload) then
				table.remove(LOGOCACHE, i)
				break
			else
				return
			end
		end
	end

	download_clan_logo(clanid)
	local rotation = 0
	local scale = 0
	local transparency = { 0.8 }
	local loadView = UIElement:new({
		parent = viewElement,
		pos = { 0, -30 },
		size = { viewElement.size.w, 30 }
	})
	loadView:addCustomDisplay(true, function()
			set_color(0, 0, 0, transparency[1] / 2)
			draw_quad(loadView.pos.x, loadView.pos.y, loadView.size.w, loadView.size.h)
		end)
	local loadIndicatorDisk = UIElement:new({
		parent = loadView,
		pos = { 0, 0 },
		size = { loadView.size.h,  loadView.size.h }
	})
	local loadIndicator = UIElement:new({
		parent = loadView,
		pos = { loadView.size.h, 0 },
		size = { loadView.size.w - loadView.size.h, loadView.size.h }
	})
	loadIndicatorDisk:addCustomDisplay(true, function()
			set_color(1,1,1,transparency[1])
			draw_disk(loadIndicatorDisk.pos.x + loadIndicatorDisk.size.w / 2, loadIndicatorDisk.pos.y + loadIndicatorDisk.size.h / 2, 6, 12, 200, 1, rotation, scale, 0)
			rotation = rotation + 2.5
			scale = scale + 5
			if (scale > 360) then
				scale = -360
			end
		end)
	local updateTextScale = 1
	while (not loadIndicator:uiText(TB_MENU_LOCALIZED.CLANSUPDATINGLOGO, nil, nil, nil, LEFT, updateTextScale, nil, nil, nil, nil, nil, true)) do
		updateTextScale = updateTextScale - 0.05
	end
	local downloadInProgress = true
	loadIndicator:addCustomDisplay(true, function()
			local downloads = get_downloads()
			if (#downloads == 0) then
				downloadInProgress = false
			end
			if (not downloadInProgress) then
				if (transparency[1] == 0.8) then
					viewElement:updateImage("../textures/clans/"..clanid..".tga", Clans.DefaultLogo, true)
				end
				transparency[1] = transparency[1] - 0.05
				if (transparency[1] <= 0) then
					table.insert(LOGOCACHE, clanid)
					loadView:kill()
				end
			end
			loadIndicator:uiText(TB_MENU_LOCALIZED.CLANSUPDATINGLOGO, nil, nil, nil, nil, updateTextScale, nil, nil, { 1, 1, 1, transparency[1] })
		end)
end
